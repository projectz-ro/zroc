<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="zroc__error_8c" kind="file" language="C++">
    <compoundname>zroc_error.c</compoundname>
    <includes refid="zroc__error_8h" local="yes">zroc/error/zroc_error.h</includes>
    <includes refid="zroc__memory_8h" local="yes">zroc/memory/zroc_memory.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="zroc__log_8h" local="no">zroc/log/zroc_log.h</includes>
    <incdepgraph>
      <node id="2">
        <label>zroc/error/zroc_error.h</label>
        <link refid="zroc__error_8h"/>
      </node>
      <node id="4">
        <label>zroc/log/zroc_log.h</label>
        <link refid="zroc__log_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>zroc/memory/zroc_memory.h</label>
        <link refid="zroc__memory_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/error/zroc_error.c</label>
        <link refid="zroc__error_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pthread.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="zroc__error_8c_1af90f47e36f6fd3588df79039a6dd332e" prot="public" static="no" mutable="no">
        <type><ref refid="structZrocErr" kindref="compound">ZrocErr</ref></type>
        <definition>ZrocErr ZROC_ERRORS[]</definition>
        <argsstring>[]</argsstring>
        <name>ZROC_ERRORS</name>
        <initializer>= {
    {.code = <ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa9a759b6562ff61139b10b6220d06bffe" kindref="member">ZROC_OK</ref>, .message = &quot;&quot;},
    {.code = <ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7faf33a4679cea63d39ff3ee04c0875cc96" kindref="member">ZROC_ERR_INVALID_ARG</ref>, .message = &quot;Invalid argument&quot;},
    {.code = <ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa41533111691f1bac49acb4a269493a15" kindref="member">ZROC_ERR_OUT_OF_MEMORY</ref>, .message = &quot;Out of memory&quot;},
    {.code = <ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fac0a4833a9cfc75aa53695c751b0af5f4" kindref="member">ZROC_ERR_ALLOC_FAILED</ref>, .message = &quot;Allocation failed&quot;},
    {.code = <ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa3a782c262509cc841e56ab01d35d8c9b" kindref="member">ZROC_ERR_CUSTOM</ref>, .message = &quot;&quot;},
    {.code = <ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7faca0d574c5785a39437bfeff15d57df13" kindref="member">ZROC_ERR_UNKNOWN</ref>, .message = &quot;Unknown error&quot;},
}</initializer>
        <briefdescription>
<para>Array of default errors with messages for each error code. </para>
        </briefdescription>
        <detaileddescription>
<para>Used as the source for default messages when none is provided. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/error/zroc_error.c" line="8" column="9" bodyfile="src/error/zroc_error.c" bodystart="8" bodyend="15"/>
      </memberdef>
      <memberdef kind="variable" id="zroc__error_8c_1a0eba12c49e86c3e9798006cb53892016" prot="public" static="yes" mutable="no">
        <type>pthread_key_t</type>
        <definition>pthread_key_t error_key</definition>
        <argsstring></argsstring>
        <name>error_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/error/zroc_error.c" line="17" column="22" bodyfile="src/error/zroc_error.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="zroc__error_8c_1a8fe64f4d6be40dc775ec4467b20dd8d3" prot="public" static="yes" mutable="no">
        <type>pthread_once_t</type>
        <definition>pthread_once_t error_key_once</definition>
        <argsstring></argsstring>
        <name>error_key_once</name>
        <initializer>= PTHREAD_ONCE_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/error/zroc_error.c" line="18" column="23" bodyfile="src/error/zroc_error.c" bodystart="18" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="zroc__error_8c_1a2bc8d2ae6e2d11fdd83f63232a0f90fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void make_error_key</definition>
        <argsstring>()</argsstring>
        <name>make_error_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/error/zroc_error.c" line="19" column="13" bodyfile="src/error/zroc_error.c" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="zroc__error_8c_1a2fd7a0b4bad0021bf4e749b184c96968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structZrocErr" kindref="compound">ZrocErr</ref> *</type>
        <definition>ZrocErr * zroc_err_get</definition>
        <argsstring>(void)</argsstring>
        <name>zroc_err_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the thread-local error object. </para>
        </briefdescription>
        <detaileddescription>
<para>If the thread does not have an error object yet, one will be allocated and initialized with code <computeroutput>ZROC_OK</computeroutput> and an empty message.</para>
<para><simplesect kind="return"><para>Pointer to the thread-local <ref refid="structZrocErr" kindref="compound">ZrocErr</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/error/zroc_error.c" line="21" column="9" bodyfile="src/error/zroc_error.c" bodystart="21" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="zroc__error_8c_1ac3b5134d4b68d73b4648c2c8d024bbe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zroc_err_set</definition>
        <argsstring>(ZrocErrCode code, const char *msg)</argsstring>
        <name>zroc_err_set</name>
        <param>
          <type><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7f" kindref="member">ZrocErrCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Set the thread-local error. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates the thread-local error code and message. If <computeroutput>msg</computeroutput> is <computeroutput>NULL</computeroutput>, the default message for the given <computeroutput>code</computeroutput> from <computeroutput>ZROC_ERRORS</computeroutput> will be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional error message. If NULL, the default is used. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/error/zroc_error.c" line="33" column="6" bodyfile="src/error/zroc_error.c" bodystart="33" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="zroc__error_8h" kindref="compound">zroc/error/zroc_error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="zroc__memory_8h" kindref="compound">zroc/memory/zroc_memory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="zroc__log_8h" kindref="compound">zroc/log/zroc_log.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="structZrocErr" kindref="compound">ZrocErr</ref><sp/><ref refid="zroc__error_8c_1af90f47e36f6fd3588df79039a6dd332e" kindref="member">ZROC_ERRORS</ref>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{.code<sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa9a759b6562ff61139b10b6220d06bffe" kindref="member">ZROC_OK</ref>,<sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{.code<sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7faf33a4679cea63d39ff3ee04c0875cc96" kindref="member">ZROC_ERR_INVALID_ARG</ref>,<sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>argument&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{.code<sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa41533111691f1bac49acb4a269493a15" kindref="member">ZROC_ERR_OUT_OF_MEMORY</ref>,<sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{.code<sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fac0a4833a9cfc75aa53695c751b0af5f4" kindref="member">ZROC_ERR_ALLOC_FAILED</ref>,<sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Allocation<sp/>failed&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{.code<sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa3a782c262509cc841e56ab01d35d8c9b" kindref="member">ZROC_ERR_CUSTOM</ref>,<sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{.code<sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7faca0d574c5785a39437bfeff15d57df13" kindref="member">ZROC_ERR_UNKNOWN</ref>,<sp/>.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>error&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_key_t<sp/>error_key;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_once_t<sp/>error_key_once<sp/>=<sp/>PTHREAD_ONCE_INIT;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_error_key()<sp/>{<sp/>pthread_key_create(&amp;error_key,<sp/>free);<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="structZrocErr" kindref="compound">ZrocErr</ref><sp/>*<ref refid="zroc__error_8c_1a2fd7a0b4bad0021bf4e749b184c96968" kindref="member">zroc_err_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>pthread_once(&amp;error_key_once,<sp/>make_error_key);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="structZrocErr" kindref="compound">ZrocErr</ref><sp/>*err<sp/>=<sp/>pthread_getspecific(error_key);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!err)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/><ref refid="zroc__memory_8c_1a6beb2342c311e02fa38e25e8cb961f59" kindref="member">zroc_calloc</ref>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structZrocErr" kindref="compound">ZrocErr</ref>));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>err-&gt;<ref refid="structZrocErr_1a73fd92c7b52c1442156c2028ec4a8ed7" kindref="member">code</ref><sp/>=<sp/><ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7fa9a759b6562ff61139b10b6220d06bffe" kindref="member">ZROC_OK</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>err-&gt;<ref refid="structZrocErr_1a0b2e8c7f76df48129f994ecc46d5c66c" kindref="member">message</ref><sp/>=<sp/><ref refid="zroc__memory_8c_1a6beb2342c311e02fa38e25e8cb961f59" kindref="member">zroc_calloc</ref>(<ref refid="zroc__error_8h_1afcad1364c748668960a68cd178dbe988" kindref="member">ERR_MSG_MAX_SIZE</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_setspecific(error_key,<sp/>err);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="zroc__error_8c_1ac3b5134d4b68d73b4648c2c8d024bbe8" kindref="member">zroc_err_set</ref>(<ref refid="zroc__error_8h_1a6340f7a28709f8192fa324ff4f07bc7f" kindref="member">ZrocErrCode</ref><sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!msg)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/><ref refid="zroc__error_8c_1af90f47e36f6fd3588df79039a6dd332e" kindref="member">ZROC_ERRORS</ref>[code].message;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="structZrocErr" kindref="compound">ZrocErr</ref><sp/>*err<sp/>=<sp/><ref refid="zroc__error_8c_1a2fd7a0b4bad0021bf4e749b184c96968" kindref="member">zroc_err_get</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>err-&gt;<ref refid="structZrocErr_1a73fd92c7b52c1442156c2028ec4a8ed7" kindref="member">code</ref><sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>snprintf(err-&gt;<ref refid="structZrocErr_1a0b2e8c7f76df48129f994ecc46d5c66c" kindref="member">message</ref>,<sp/><ref refid="zroc__error_8h_1afcad1364c748668960a68cd178dbe988" kindref="member">ERR_MSG_MAX_SIZE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>msg);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/error/zroc_error.c"/>
  </compounddef>
</doxygen>
